JRAILS_MESSAGE1 = "# Generated by compass-jquery-plugin/gem-tasks/jrailsxx.rake\n# Install with: compass -f jquery -p jrails\n\n"
JRAILS_MESSAGE2 = "// Generated by compass-jquery-plugin/gem-tasks/jrailsxx.rake\n\n"

class JqueryUiTheme
  
  VARIABLE_NAME_BASE = 'ui_'
  VARIABLE_MATCHER = /(\S*)\/\*\{(\w*)\}\*\//
  THEME_FILENAME = 'ui.theme.css'
  
  attr_accessor :base_theme
  
  # Initialize with the base theme
  def initialize(base_theme_directory)
    @base_theme_directory = base_theme_directory
    @base_theme = File.read(File.join(@base_theme_directory, THEME_FILENAME))
    if @base_theme[3775..3794] == "#363636/*{fcError}*/"
      print "Fixing up bug in 1.7.1 template\n"
      @base_theme[3775..3794] == "#cd0a0a/*{fcError}*/"
    end
    if @base_theme[416,16] == ".ui-widget input"
      print "Fixing up bug in 1.7.2 template\n"
      @base_theme[416,0] = ".ui-widget .ui-widget { font-size: 1em; }\n"
    end
  end
  
  # This sets up the Regexp that will extract the variables from a theme
  def regexp
    return @regexp if @regexp
    placeholder = '___PLACEHOLDER___'
    @regexp = @base_theme.dup
    # Install placeholders for the variable data
    @regexp.gsub!(VARIABLE_MATCHER) {placeholder}
    # Strip the header comments
    @regexp.gsub! /.*^\*\/\s*/m, ''
    # Collapse all whitespace
    @regexp.gsub! /\s+/, ' '
    # Escape the literal strings
    @regexp = Regexp.escape(@regexp)
    # Whitespace means nothing
    @regexp.gsub! /\\\ /, '\s+'
    # Fast variable finder
    @regexp.gsub! placeholder, '([^;]*|\S*)'
    # Get 'er done
    @regexp = Regexp.new(@regexp)
  end

  # You can zip this with the regexp captures to create a variable hash
  def regexp_variables
    return @regexp_variables if @regexp_variables
    @regexp_variables = Array.new
    @base_theme.scan(VARIABLE_MATCHER) {@regexp_variables << $2}
    @regexp_variables
  end
  
  # Convert all the ui.*.css files into sass goodness
  def convert_css(version, stylesheets)
    FileUtils.mkdir_p(File.join(stylesheets))
    Dir.foreach @base_theme_directory do |file|      
      if version == 14
        next unless /^jquery.ui\..*\.css$/ =~ file
        next if %w{jquery.ui.all.css jquery.ui.base.css}.include? file
        css = File.read(File.join(@base_theme_directory, file))
        open File.join(stylesheets, '_' + file.gsub(/\.css$/,'.sass').gsub(/^jquery.ui\./,'')), 'w' do |f|
          if file == THEME_FILENAME
            f.print(self.class.theme_css2sass(@base_theme))
          else
            f.print(self.class.css2sass(css))
          end
          f.close
        end
      else
        next unless /^ui\..*\.css$/ =~ file
        next if %w{ui.all.css ui.base.css}.include? file
        css = File.read(File.join(@base_theme_directory, file))
        open File.join(stylesheets, '_' + file.gsub(/\.css$/,'.sass').gsub(/^ui\./,'')), 'w' do |f|
          if file == THEME_FILENAME
            f.print(self.class.theme_css2sass(@base_theme))
          else
            f.print(self.class.css2sass(css))
          end
          f.close
        end
      end
    end
  end
  
  # Create a sass file of variables names and copy the images
  def convert_theme(name, dir, stylesheets)
    if name == 'base'
      theme = @base_theme
    else
      theme = File.read(File.join(dir, THEME_FILENAME))
    end
    FileUtils.mkdir_p stylesheets
    # Figure out the variables with the regexp
    vars = Hash.new
    regexp.match(theme).captures.each_with_index do |capture, index|
      # Remove variable comments
      capture.gsub! /\/\*\{\w*\}\*\/$/, ''
      # Update url
      capture.gsub! /^url\(images(.*)\)/, "image_url(\"jquery.ui/#{name}\\1\")"
      # Quote most things
      capture = "\"#{capture}\"" if capture =~ /[^#%0-9a-fptxm\-]/ and !(capture =~ /^image_url/)
      vars[VARIABLE_NAME_BASE + regexp_variables[index]] ||= capture
    end
    # Write out the theme sass
    open File.join(stylesheets, "#{name}.sass"), 'w' do |f|
      f.print JRAILS_MESSAGE2 
      # Preserve header comment (css2sass currently doesn't convert comments)
      theme =~ /\/\*\s*(.*)^\*\//m
      $1.each {|line| f.print line.gsub(/^(\s*\*\s*)/,'// ')}
      f.print "\n"
      vars.each do |variable_name, value|
        f.print "!#{variable_name} ||= #{value}\n"
      end
      f.print "\n@import jquery.ui/_theme.sass\n"
    end
  end
  
  # Converter for ui.theme.css which has the variable names
  def self.theme_css2sass(theme_css)
    # Install variable names and convert to sass
    sass = css2sass(theme_css.gsub(VARIABLE_MATCHER){"!#{VARIABLE_NAME_BASE}#{$2}"})
    # Convert select lines from literal to programatic syntax
    sass.gsub!(/.*/){|x| /\!/=~x ? x.gsub(/:/,'=').gsub(/ solid /, ' "solid" ') : x}
    sass
  end
  
  # Sass is simply awesome
  def self.css2sass(css)
    sass = '' 
    IO.popen("css2sass", 'r+') { |f| f.print(css); f.close_write; sass = f.read }
    return sass
  end  
end
  